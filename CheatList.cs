// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var cheatList = CheatList.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CheatList
    {
        [JsonProperty("cheats")]
        public CheatListCheat[] Cheats { get; set; }
    }

    public partial class CheatListCheat
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("procname")]
        public string Procname { get; set; }

        [JsonProperty("cheats")]
        public CheatCheat[] Cheats { get; set; }
    }

    public partial class CheatCheat
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }

        [JsonProperty("address")]
        public string Address { get; set; }
    }

    public partial class CheatList
    {
        public static CheatList FromJson(string json) => JsonConvert.DeserializeObject<CheatList>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CheatList self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
